// <auto-generated />
using System;
using BackendChallenge.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackendChallenge.Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240808214342_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackendChallenge.Application.Accounts.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BackendChallenge.Application.Bikes.Bike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("license_plate");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("model");

                    b.Property<int>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_bikes");

                    b.HasIndex("LicensePlate")
                        .IsUnique()
                        .HasDatabaseName("ix_bikes_license_plate");

                    b.ToTable("bikes", (string)null);
                });

            modelBuilder.Entity("BackendChallenge.Application.Delivery.Deliveryman", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("CnhImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cnh_image_url");

                    b.Property<string>("CnhNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("cnh_number");

                    b.Property<string>("CnhType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cnh_type");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_deliverymen");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_deliverymen_account_id");

                    b.HasIndex("CnhNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_deliverymen_cnh_number");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("ix_deliverymen_cnpj");

                    b.ToTable("deliverymen", (string)null);
                });

            modelBuilder.Entity("BackendChallenge.Application.Rentals.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("CostPerDay")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cost_per_day");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_days");

                    b.Property<decimal>("FineCostPercentagePerDay")
                        .HasColumnType("numeric")
                        .HasColumnName("fine_cost_percentage_per_day");

                    b.HasKey("Id")
                        .HasName("pk_plans");

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("BackendChallenge.Application.Rentals.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BikeId")
                        .HasColumnType("uuid")
                        .HasColumnName("bike_id");

                    b.Property<Guid>("DeliverymanId")
                        .HasColumnType("uuid")
                        .HasColumnName("deliveryman_id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric")
                        .HasColumnName("total_cost");

                    b.HasKey("Id")
                        .HasName("pk_rentals");

                    b.HasIndex("BikeId")
                        .HasDatabaseName("ix_rentals_bike_id");

                    b.HasIndex("DeliverymanId")
                        .HasDatabaseName("ix_rentals_deliveryman_id");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_rentals_plan_id");

                    b.ToTable("rentals", (string)null);
                });

            modelBuilder.Entity("BackendChallenge.Application.Delivery.Deliveryman", b =>
                {
                    b.HasOne("BackendChallenge.Application.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("BackendChallenge.Application.Delivery.Deliveryman", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_deliverymen_asp_net_users_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BackendChallenge.Application.Rentals.Rental", b =>
                {
                    b.HasOne("BackendChallenge.Application.Bikes.Bike", "Bike")
                        .WithMany()
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_bikes_bike_id");

                    b.HasOne("BackendChallenge.Application.Delivery.Deliveryman", "Deliveryman")
                        .WithMany()
                        .HasForeignKey("DeliverymanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_deliveryman_deliveryman_id");

                    b.HasOne("BackendChallenge.Application.Rentals.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_plans_plan_id");

                    b.Navigation("Bike");

                    b.Navigation("Deliveryman");

                    b.Navigation("Plan");
                });
#pragma warning restore 612, 618
        }
    }
}
